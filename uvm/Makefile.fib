
QUESTA_HOME = /pkgs/mentor/questa/2024.2/questasim/
ifdef MENTOR
  QUESTA_HOME = /u/release/questa/2024.2/questasim/
endif

HW   = ../design_rtl
TB   = ./tb_sources

VLIB = $(QUESTA_HOME)/bin/vlib
VMAP = $(QUESTA_HOME)/bin/vmap
VLOG = $(QUESTA_HOME)/bin/vlog -64 -lint +acc=all -work work +incdir=$(TB)
VOPT = $(QUESTA_HOME)/bin/vopt 
VSIM = $(QUESTA_HOME)/bin/vsim -64 -voptargs=+acc -work work 
#GCC  = $(QUESTA_HOME)/gcc32/bin/gcc

.PHONY: all compile sim gui clean

all: 
	@echo " "
	@echo " fibonacci make targets are: "
	@echo "   - sim         = run Questa in command line mode Questa "
	@echo "   - gui         = run Questa in GUI mode "
	@echo "   - coverage    = run coverage analysis "
	@echo "   - broken      = run with errors induced in the DUT "
	@echo " "

#COVER_DO = "coverage save -instance top.u_cpu_design.u_cpu -codeAll cover_fib.ucdb -onexit ; run 10 ms"
COVER_DO = "coverage save -instance top.u_cpu_design.u_cpu cover_fib.ucdb -onexit ; run 10 ms"
GUI_DO = "do design_wave.do; run 10 ms"
SIM_DO = "run 10 ms"

# Set "BAD_MODULE" to module that should induce faults
# valid values are ALU, BCU (branch control unit), MCU (memory control unit), and DEC (decoder)
# only used with "make broken", can be set on command line as "make broken BAD_MODULE=MCU

BAD_MODULE ?= ALU

 
gui: compile riscv_iss.so
	$(VSIM) -do $(GUI_DO) top +UVM_TESTNAME=fibonacci -sv_lib riscv_iss

sim: compile riscv_iss.so
	$(VSIM) -c -do $(SIM_DO) top +UVM_TESTNAME=fibonacci -sv_lib riscv_iss 

coverage: compile riscv_iss.so
	$(VSIM) -c -do $(COVER_DO) top +UVM_TESTNAME="fibonacci" -sv_lib riscv_iss -coverage

broken: compile riscv_iss.so
	$(VSIM) -c -do $(SIM_DO) top +UVM_TESTNAME="fibonacci" -sv_lib riscv_iss -g BROKEN=$(BAD_MODULE)

compile: clean 
	rm -rf ./work

	$(VLIB) ./work
	$(VMAP) work ./work

	# UVM test files
	$(VLOG) $(HW)/opcode_pkg.sv
	$(VLOG) $(TB)/iss_pkg.sv
	$(VLOG) $(TB)/riscv_test_interfaces.sv
	$(VLOG) $(TB)/execute_test_pkg.sv
	$(VLOG) $(TB)/riscv_design_test.sv

	# RISCV files
	$(VLOG) $(HW)/alu.sv +cover
	$(VLOG) $(HW)/memory_ctrl.sv +cover
	$(VLOG) $(HW)/branch_ctrl.sv +cover
	$(VLOG) $(HW)/decoder.sv +cover
	$(VLOG) $(HW)/riscv_rv32i.sv +cover

	# Design files
	$(VLOG) $(HW)/ssram.sv
	$(VLOG) $(HW)/cpu_design.sv

riscv_iss.so: iss/riscv_iss.c
	gcc -o riscv_iss.so -shared -fPIC -std=c99 iss/riscv_iss.c 

CRUFT  = transcript
CRUFT += *.wlf
CRUFT += work
CRUFT += modelsim.ini
CRUFT += riscv_iss.so

clean:
	rm -rf $(CRUFT)
